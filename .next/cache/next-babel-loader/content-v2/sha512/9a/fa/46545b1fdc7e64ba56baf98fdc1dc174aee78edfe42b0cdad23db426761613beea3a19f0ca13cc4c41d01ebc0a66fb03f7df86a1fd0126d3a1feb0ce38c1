{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\joaop\\\\Desktop\\\\NWL5\\\\podcastrr\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex < episodeList.length) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YVK/pyQj2lhHgLmg4FMG0eROz7Q=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/joaop/Desktop/NWL5/podcastrr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","playNext","nextEpisodeIndex","length","playPrevious","togglePlay","setPlayingState","state"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAqBA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,OAA2E;AAAA;;AAAA,MAAzCC,QAAyC,QAAzCA,QAAyC;;AAAA,kBAExCH,QAAQ,CAAC,EAAD,CAFgC;AAAA,MAExEI,WAFwE;AAAA,MAE3DC,cAF2D;;AAAA,mBAGxBL,QAAQ,CAAC,CAAD,CAHgB;AAAA,MAGxEM,mBAHwE;AAAA,MAGnDC,sBAHmD;;AAAA,mBAI5CP,QAAQ,CAAC,KAAD,CAJoC;AAAA,MAIxEQ,SAJwE;AAAA,MAI7DC,YAJ6D;;AAMhF,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,QAAT,GAAoB;AAClB,QAAMC,gBAAgB,GAAGV,mBAAmB,GAAG,CAA/C;;AAEA,QAAIU,gBAAgB,GAAGZ,WAAW,CAACa,MAAnC,EAA2C;AACzCV,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AAEF;;AAED,WAASY,YAAT,GAAwB;AAEtB,QAAGZ,mBAAmB,GAAG,CAAzB,EAA4B;AAC1BC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AAEF;;AAED,WAASa,UAAT,GAAsB;AACpBV,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASY,eAAT,CAAyBC,KAAzB,EAAyC;AACvCZ,IAAAA,YAAY,CAACY,KAAD,CAAZ;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAG;AACJjB,MAAAA,WAAW,EAAXA,WADI;AAEJE,MAAAA,mBAAmB,EAAnBA,mBAFI;AAGJI,MAAAA,IAAI,EAAJA,IAHI;AAIJE,MAAAA,QAAQ,EAARA,QAJI;AAKJJ,MAAAA,SAAS,EAATA,SALI;AAMJW,MAAAA,UAAU,EAAVA,UANI;AAOJC,MAAAA,eAAe,EAAfA;AAPI,KADR;AAAA,cAWGjB;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA3DeD,qB;;KAAAA,qB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\n\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n};\r\n\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[];\r\n  currentEpisodeIndex: number;\r\n  isPlaying: boolean;\r\n  play: (episode: Episode) => void;\r\n  togglePlay: () => void;\r\n  setPlayingState: (state: boolean) => void;\r\n  playList: (list: Episode[], index: number) => void;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData); \r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider( { children } : PlayerContextProviderProps) {\r\n\r\n  const [ episodeList, setEpisodeList ] = useState([]);\r\n  const [ currentEpisodeIndex, setCurrentEpisodeIndex ] = useState(0);\r\n  const [ isPlaying, setIsPlaying ] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode])\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playNext() {\r\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n    if (nextEpisodeIndex < episodeList.length) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n\r\n  }\r\n\r\n  function playPrevious() {\r\n\r\n    if(currentEpisodeIndex > 0) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n    }\r\n\r\n  }\r\n\r\n  function togglePlay() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider \r\n    value={ { \r\n        episodeList, \r\n        currentEpisodeIndex, \r\n        play, \r\n        playList,\r\n        isPlaying, \r\n        togglePlay, \r\n        setPlayingState\r\n      }}>\r\n\r\n      {children}\r\n\r\n    </PlayerContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}