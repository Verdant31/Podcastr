{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\joaop\\\\Desktop\\\\NWL5\\\\podcastrr\\\\src\\\\contexts\\\\PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      togglePlay,\n      setPlayingState,\n      hasPrevious,\n      hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["C:/Users/joaop/Desktop/NWL5/podcastrr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","togglePlay","setPlayingState","state","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AAyBA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAA2E;AAEhF,QAAM;AAAA,OAAEC,WAAF;AAAA,OAAeC;AAAf,MAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAAEO,mBAAF;AAAA,OAAuBC;AAAvB,MAAkDR,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM;AAAA,OAAES,SAAF;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASW,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,QAAMM,WAAW,GAAGT,mBAAmB,GAAG,CAA1C;AACA,QAAMU,OAAO,GAAIV,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACa,MAAxD;;AAEA,WAASC,QAAT,GAAoB;AAClB,UAAMC,gBAAgB,GAAGb,mBAAmB,GAAG,CAA/C;;AAEA,QAAIU,OAAJ,EAAa;AACXT,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AAEF;;AAED,WAASc,YAAT,GAAwB;AAEtB,QAAGL,WAAH,EAAgB;AACdR,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AAEF;;AAED,WAASe,UAAT,GAAsB;AACpBZ,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASc,eAAT,CAAyBC,KAAzB,EAAyC;AACvCd,IAAAA,YAAY,CAACc,KAAD,CAAZ;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAG;AACJnB,MAAAA,WADI;AAEJE,MAAAA,mBAFI;AAGJI,MAAAA,IAHI;AAIJE,MAAAA,QAJI;AAKJM,MAAAA,QALI;AAMJE,MAAAA,YANI;AAOJZ,MAAAA,SAPI;AAQJa,MAAAA,UARI;AASJC,MAAAA,eATI;AAUJP,MAAAA,WAVI;AAWJC,MAAAA;AAXI,KADR;AAAA,cAeGb;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;AAED,OAAO,MAAMqB,SAAS,GAAG,MAAM;AAC7B,SAAOxB,UAAU,CAACC,aAAD,CAAjB;AACD,CAFM","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n};\r\n\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[];\r\n  currentEpisodeIndex: number;\r\n  isPlaying: boolean;\r\n  play: (episode: Episode) => void;\r\n  togglePlay: () => void;\r\n  setPlayingState: (state: boolean) => void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData); \r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider( { children } : PlayerContextProviderProps) {\r\n\r\n  const [ episodeList, setEpisodeList ] = useState([]);\r\n  const [ currentEpisodeIndex, setCurrentEpisodeIndex ] = useState(0);\r\n  const [ isPlaying, setIsPlaying ] = useState(false);\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode])\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length\r\n\r\n  function playNext() {\r\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n\r\n    if (hasNext) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n\r\n  }\r\n\r\n  function playPrevious() {\r\n\r\n    if(hasPrevious) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n    }\r\n\r\n  }\r\n\r\n  function togglePlay() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider \r\n    value={ { \r\n        episodeList, \r\n        currentEpisodeIndex, \r\n        play, \r\n        playList,\r\n        playNext,\r\n        playPrevious,\r\n        isPlaying, \r\n        togglePlay, \r\n        setPlayingState,\r\n        hasPrevious,\r\n        hasNext,\r\n      }}>\r\n\r\n      {children}\r\n\r\n    </PlayerContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}